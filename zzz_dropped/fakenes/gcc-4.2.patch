Index: src/audio.cpp
===================================================================
--- src/audio.cpp.orig	2009-01-21 23:39:16.779008450 +0100
+++ src/audio.cpp	2009-01-21 23:39:39.905707207 +0100
@@ -6,6 +6,7 @@
    This is free software.  See 'LICENSE' for details.
    You must read and accept the license prior to use. */
 
+#include <stdio.h>
 #include <allegro.h>
 #include <cstdlib>
 #include <cstring>
@@ -234,7 +234,7 @@
          const unsigned queuedFrames = (audioQueue.size() / audio_channels);
          if(queuedFrames > 0) {
             // Determine how many frames we want to make room for.
-            const unsigned framesToAdd = min(queuedFrames, audio_buffer_size_frames);
+            const unsigned framesToAdd = MIN(queuedFrames, audio_buffer_size_frames);
             // Make room for the frames in the buffer.
             const unsigned framesToMove = (audioBufferedFrames - framesToAdd);
             if(framesToMove > 0) {
@@ -258,7 +258,7 @@
          // Determine how many frames are available in the buffer.
          const unsigned bufferableFrames = (audio_buffer_size_frames - audioBufferedFrames);
          // Determine the number of frames to copy to the buffer.
-         const unsigned framesToCopy = min(queuedFrames, bufferableFrames);
+         const unsigned framesToCopy = MIN(queuedFrames, bufferableFrames);
 
          // Copy frames to the buffer.
          for(unsigned frame = 0; frame < framesToCopy; frame++) {
Index: src/include/common.h
===================================================================
--- src/include/common.h	(revision 1663)
+++ src/include/common.h	(working copy)
@@ -41,9 +41,6 @@
 #define true   TRUE
 #define false  FALSE
 
-#define min(x,y)   MIN((x),(y))
-#define max(x,y)   MAX((x),(y))
-
 #define true_or_false(x)   ((x) ? true : false)
 
 #define null   NULL
Index: src/apu.cpp
===================================================================
--- src/apu.cpp	(revision 1663)
+++ src/apu.cpp	(working copy)
@@ -1930,7 +1930,7 @@
          gain -= releaseRate;
       }
 
-      real output = (1.0 / max(gain, EPSILON));
+      real output = (1.0 / MAX(gain, EPSILON));
       output = fixf(output, apu_agc_gain_floor, apu_agc_gain_ceiling);
       sample *= output;
    }
